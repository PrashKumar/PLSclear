'USEUNIT Library
'USEUNIT LIBRARY_REQUESTMANAGER
'USEUNIT LIBRARY_TITLEMANAGER

''## Description: Login as RH which doesnt have mandate for FPL. Get a title isn value from that account. Login as Requestor and place a request that falls outside of FOC. 
                  '' Login as above RH and issue manual quotation for the same request. Login as Requestor and Accept the quotation. Verify the status of the request.


 Sub STAT_tc13_QuoteAccepted_QuoteAcceptedByRQ
     Log.Message("TestCase - STAT_tc13_QuoteAccepted_QuoteAcceptedByRQ")
     
   excelPath = "C:\Users\C4T\Desktop\PLSclearDDT.xlsx"
   excelRowVal = 57
   Set objExcel = Sys.OleObject("Excel.Application")
   objExcel.DisplayAlerts = 0
   objExcel.Visible = True
   objExcel.Workbooks.Open excelPath
   
   browserVal = GetDataFromExcel(excelPath,"Login",excelRowVal,1)
   urlVal = GetDataFromExcel(excelPath,"Login",excelRowVal,2)
   ''## Rights Holder Login credentials
   usernameVal = GetDataFromExcel(excelPath,"Login",excelRowVal,3)
   passwordVal = GetDataFromExcel(excelPath,"Login",excelRowVal,4) 
   ''## Requestor Login credentials
   usernameVal2 = GetDataFromExcel(excelPath,"Login",excelRowVal,5)
   passwordVal2 = GetDataFromExcel(excelPath,"Login",excelRowVal,6)
   
    ''# Search
   searchtypeVal = GetDataFromExcel(excelPath,"Search",excelRowVal,1)
   searchVal = GetDataFromExcel(excelPath,"Search",excelRowVal,2)
   resultVal = searchVal
   ''# Select Content
   textextractVal = GetDataFromExcel (excelPath,"Select Content",excelRowVal,1)
   poemVal = GetDataFromExcel(excelPath,"Select Content",excelRowVal,2)
   illustrationVal = GetDataFromExcel(excelPath,"Select Content",excelRowVal,3)
   tableVal = GetDataFromExcel(excelPath,"Select Content",excelRowVal,4)
   articleVal = GetDataFromExcel(excelPath,"Select Content",excelRowVal,5)
   ''# Details of Content
   noofwordsVal = GetDataFromExcel(excelPath,"Details of Content",excelRowVal,1)
   pagenoVal = GetDataFromExcel(excelPath,"Details of Content",excelRowVal,2)
   nameofthepoemVal = GetDataFromExcel(excelPath,"Details of Content",excelRowVal,3)
   reproductioncolourVal = GetDataFromExcel(excelPath,"Details of Content",excelRowVal,4)
   reproductionsizeVal = GetDataFromExcel(excelPath,"Details of Content",excelRowVal,5)
   figurenumber_titleVal  = GetDataFromExcel(excelPath,"Details of Content",excelRowVal,6)
   pagenumberVal = GetDataFromExcel(excelPath,"Details of Content",excelRowVal,7)
   pagerangeVal = GetDataFromExcel(excelPath,"Details of Content",excelRowVal,8)
   issuedateVal = GetDataFromExcel(excelPath,"Details of Content",excelRowVal,9)
   yearofpublicationVal = GetDataFromExcel(excelPath,"Details of Content",excelRowVal,10)
   reuseprojectswitchVal = GetDataFromExcel(excelPath,"Details of Content",excelRowVal,11)
   areyouauthorVal = GetDataFromExcel(excelPath,"Details of Content",excelRowVal,14)
   ''##  Select Planned Use 
   usagetypeVal = GetDataFromExcel(excelPath,"Select Planned Use",excelRowVal,4)
   usagesubtypeVal = GetDataFromExcel(excelPath,"Select Planned Use",excelRowVal,5)
   ''## 'Details of Usage' (Mandatory parameters ONLY)
   purposeVal = GetDataFromExcel(excelPath,"Details of Content",excelRowVal,12)
   sectorVal = GetDataFromExcel(excelPath,"Details of Content",excelRowVal,13)
   territoriesVal = GetDataFromExcel(excelPath,"Select Planned Use",excelRowVal,7)
   printrunVal = GetDataFromExcel(excelPath,"Select Planned Use",excelRowVal,8)
   retailpriceVal = GetDataFromExcel(excelPath,"Select Planned Use",excelRowVal,9)
   estimatedsalesVal = GetDataFromExcel(excelPath,"Select Planned Use",excelRowVal,10)
   estimatedCDsalesVal = GetDataFromExcel(excelPath,"Select Planned Use",excelRowVal,11)
   estimateddownloadsalesVal = GetDataFromExcel(excelPath,"Select Planned Use",excelRowVal,12)
   audiencerestrictedinanywayVal = GetDataFromExcel(excelPath,"Select Planned Use",excelRowVal,13)
   expectednumberofvisitorsVal = GetDataFromExcel(excelPath,"Select Planned Use",excelRowVal,14)
   circulationVal = GetDataFromExcel(excelPath,"Select Planned Use",excelRowVal,15)
   openaccessVal = GetDataFromExcel(excelPath,"Select Planned Use",excelRowVal,16)
   estimatednumberofticketsalesVal = GetDataFromExcel(excelPath,"Select Planned Use",excelRowVal,17)
   numberofslidesVal = GetDataFromExcel(excelPath,"Select Planned Use",excelRowVal,18)
   totalruntimeVal = GetDataFromExcel(excelPath,"Select Planned Use",excelRowVal,19)
   numberofusersVal = GetDataFromExcel(excelPath,"Select Planned Use",excelRowVal,20)
   formatVal = GetDataFromExcel(excelPath,"Select Planned Use",excelRowVal,21)
   methodofdistributionVal = GetDataFromExcel(excelPath,"Select Planned Use",excelRowVal,22)
   periodoftimeVal = GetDataFromExcel(excelPath,"Select Planned Use",excelRowVal,23)
   perioddownloadisactiveVal = GetDataFromExcel(excelPath,"Select Planned Use",excelRowVal,24)
   numberofstudentsusingVal = GetDataFromExcel(excelPath,"Select Planned Use",excelRowVal,25)
   numberofpagesVal = GetDataFromExcel(excelPath,"Select Planned Use",excelRowVal,26)
  
      ''####################  SCRIPT  ################################################################
    ''## Launch the PLS clear in required browser
    Call Launch_PLSclear(browserVal,urlVal)
    Set browser = Sys.FindChild("ProcessName",browserVal,1)
    Set page = browser.FindChild(Array("URL","Visible"),Array("*pls*",True),1)

    ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    ''## Login as requestor
    '# Close Additional dialogue (Do you want to leave this site?) that comes up when previous request session is to be aborted
    Call ActionOnAlertDialog(browserVal,"Yes")
    '# Login
    Call Login(browserVal,usernameVal,passwordVal,"pass","stop")
    ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    ''## Close any dialogues that appears on screen
    Call ActionOnAlertDialog(browserVal,"Yes")
    ''## Navigate to Programme Manager
    Call NavigateToPage(browserVal,"Programme Manager")
    Call Delay(500)
    Set page = browser.FindChild(Array("URL","Visible"),Array("*pls*",True),1)
    ''# Click on FoC link
    Set foclnk = page.FindChild(Array("ObjectType","outerText"),Array("Link","Free Of Charge*"),17)
    Do 
      If foclnk.Exists then
        Exit Do
      Else
        Set foclnk = page.FindChild(Array("ObjectType","outerText"),Array("Link","Free Of Charge*"),17)
      End If
    Loop 
    Do
      If foclnk.Width <> 0 then
        Exit Do
      Else
        Set foclnk = page.FindChild(Array("ObjectType","outerText","VisibleOnScreen"),Array("Link","Free Of Charge*""True"),17) 
      End If
    Loop
    Call foclnk.Click
    Call Delay(5000)
    Call Get_Programme_Title(browserVal,issn1,searchVal)
    '## Logout as RH
    Call LogOut(browserVal)
    '# Login as RQ
    Call Login(browserVal,usernameVal2,passwordVal2,"pass","stop")   
     ''## SEARCH FOR A TITLE
    Call SearchTitle(browserVal,searchtypeVal,issn1)
    ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    ''## SELECT A TITLE FROM THE SEARCH RESULTS
    Call SelectSearchResult(browserVal,issn1,isnVal)
    ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    ''## SELECT CONTENT
    Log.Checkpoint("Navigated to 'Select Content' tab")
    Call SelectContent(browserVal,textextractVal,poemVal,illustrationVal,tableVal,articleVal)
    ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    ''## DETAILS OF CONTENT
    Log.Checkpoint("Navigated to 'Details of Content' tab")
    Call Details_of_Content_MandatoryParameters(DetofContentParamsArr)
      
    '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    '## SELECT PLANNED USE
    If reuseprojectswitchVal = "No" then
      Call SelectPlannedUsage(browserVal,usagetypeVal,usagesubtypeVal,reuseprojectswitchVal)
      Set continuebtn = page.FindChild("className","buttonNext",25)
      Call continuebtn.Click
    End If

    '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
      ''## DETAILS OF USAGE
    If reuseprojectswitchVal = "No" then
      Log.Checkpoint("Navigated to 'Details of Usage' tab")
      Call DetailsOfUsage_mandatoryparameters(browserVal, ArrDetofusageParams)   
    End If

    '#''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    '## REVIEW REQUEST
    Call Review_Request(browserVal)
    ''## Get tID value(request value)
    Call Delay(1000)
    Call browser.Refresh
    Set rmtable = page.FindChildByXPath("//table[@class='listView tableRequestor']")
    Set isncell = rmtable.FindChild(Array("ColumnIndex","RowIndex","Visible"),Array(0,1,True),2)
    tID = isncell.contentText
    Log.Message("tID = "& tID)
    
    ''## Logout as RQ
    Call LogOut(browserVal)
    ''# Login as RH
    Call Login(browserVal,usernameVal,passwordVal,"pass","stop")  
    ''## Navigate to RM
    Call NavigateToPage(browserVal,"Request Manager")   
   ''## Search for a Request which is on 'Quotation sent' status
    Call SelectRequestByValue(browserVal,tID,tID)
    Call Delay(3000)
    Set assisttaskstatus = page.FindChild("ObjectIdentifier","ddTaskStatus",25)
    Call assisttaskstatus.scrollIntoView(1)
    Call assisttaskstatus.ClickItem("Send a Quote")
    Call Delay(2000)
    Call page.FindChild(Array("ObjectIdentifier","Width"),Array("txtCurrency","regexp:[^0]+"),25).Keys("100")
    Call page.FindChild(Array("ObjectIdentifier","Width"),Array("txtQuoteComment","regexp:[^0]+"),25).Keys("test comment")
    Call delay(3000)
    Set applybtn = page.FindChild(Array("ObjectType","value","Width"),Array("SubmitButton","Apply","regexp:[^0]+"),20)
    Call applybtn.scrollIntoView(1)
    Call Delay(2000)
    Call applybtn.DblClick
    Call delay(3000)
    Set browser = Sys.FindChild("ProcessName",browserVal,1)
    Set page = browser.FindChild(Array("URL","Visible"),Array("*pls*",True),1)
    '## Logout as RH
    Call LogOut(browserVal)
    '# Login as RQ
    Call Login(browserVal,usernameVal2,passwordVal2,"pass","stop")
    '# Navigate to Request Manager
    Call NavigateToPage(browserVal,"Request Manager")
    Call Delay(2000)
    Set browser = Sys.FindChild("ProcessName",browserVal,1)
    Set page = browser.FindChild(Array("URL","Visible"),Array("*pls*",True),10)
    Set sentrequestslink = page.FindChildByXPath("//a[contains(.,'Sent Requests')]")
    Call sentrequestslink.Click 
    Call Delay(2000)
    Set browser = Sys.FindChild("ProcessName",browserVal,1)
    Set page = browser.FindChild(Array("URL","Visible"),Array("*pls*",True),10) 
    Set rmtable = page.FindChildByXPath("//table")
    Set tcell = rmtable.FindChild(Array("ColumnIndex","contentText"),Array("0",tID))
    If tcell.Exists then
      Call tcell.Click
      Log.Message("Request ID "& issn1 &" was Selected to Accept the quote")
    Else
      Log.Warning("Request ID "& issn1 &" Not found in the table in order to perform Quote Acceptance.Check if request exists in this table")
      Call Runner.Stop
    End If
    Call Delay(3000)
    Set assisttaskstatus = page.FindChild("ObjectIdentifier","ddTaskStatus",30)
    Call assisttaskstatus.scrollIntoView(1)
    Call assisttaskstatus.ClickItem("Accept Quotation")
    Log.Message("The request is updated to 'Accept Quotation' by RQ")
    Call Delay(1000)
    '# Adds comment after the status update
    Call page.FindChild(Array("ObjectIdentifier","Width"),Array("*txt*Comment*","regexp:[^0]+"),25).Keys(aqdatetime.Now & " test")
    Call Delay(1000)
    Set applybtn = page.FindChildByXPath("//input[@value='Apply']")
    Call applybtn.scrollIntoView(1)
    Call applybtn.Click
    Call delay(5000)
    '# Verify the Cancel status of the chosen request
    Set browser = Sys.FindChild("ProcessName",browserVal,1)
    Set page = browser.FindChild(Array("URL","Visible"),Array("*pls*",True),1)
    '# Types the id of the request whose status was updated and clicks on search button. tID is the request id of the updated request
    Set searchbar = page.FindChild(Array("ObjectIdentifier","ObjectType","Width"),Array("keywords","Textbox","regexp:[^0]+"),30)
    Call searchbar.SetText(tID)
    Set searchbtn = page.FindChild("className","button search internal",25)
    Call searchbtn.Click
    Call delay(5000)
    '## Code search in the RM table for the updated request and verifies its status
    Set browser = Sys.FindChild("ProcessName",browserVal,1)
    Set page = browser.FindChild(Array("URL","Visible"),Array("*pls*",True),1)
    Set rmtable = page.FindChildByXPath("//table")
    Set tcell = rmtable.FindChild(Array("ColumnIndex","contentText"),Array("0",tID))
    trow = tcell.RowIndex
    statuscolumnId = rmtable.FindChildByXPath("//th[contains(.,'Status')]").ColumnIndex
    Set tstatuscell =  rmtable.FindChild(Array("RowIndex","ColumnIndex"),Array(trow,statuscolumnId),3)
    If InStr(tstatuscell.outerHTML,"Accepted") <> 0 then 
      Log.Checkpoint("'QuoteAccepted_QuoteAcceptedByRQ' Passed: The request status for id "& tID &"is shown as 'Accepted'")
    Else
      Log.Error("'QuoteAccepted_QuoteAcceptedByRQ' Failed: The request status is NOT shown as 'Accepted'")
    End If
    Log.Picture(rmtable)

    '# Reset button is clicked after the test to reset the search results performed earlier to search
    Set resetsearchbtn = page.FindChild("ObjectIdentifier","ButtonResetSearch",30)
    Call resetsearchbtn.Click
    ''# Close Excel instance
    objExcel.Quit
    Set objExcel = Nothing    
 End Sub
   
